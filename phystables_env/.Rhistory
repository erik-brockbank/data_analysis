facet_grid(. ~ scenario + containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# MEAN RESPONSETIME
title = "Response time across complexity, containment levels"
xlab = "Complexity level (low to high)"
ylab = "Mean response time (ms, error bars = 95% CI)"
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
scenario_labels = c(
sc1 = "scenario 1",
sc2 = "scenario 2",
sc3 = "scenario 3",
sc4 = "scenario 4"
)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
complexity = complexity_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_wrap(. ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels)) +
#complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Calculate means, CIs
responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(responsetime.means, title, xlab, ylab)
make.canonical.bargraph = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime)) +
geom_bar(stat = "identity", width = 0.5) +
# scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_wrap(. ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels, +
complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
make.canonical.bargraph = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime)) +
geom_bar(stat = "identity", width = 0.5) +
# scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_wrap(. ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
complexity = complexity_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Calculate means, CIs
responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(responsetime.means, title, xlab, ylab)
make.canonical.bargraph = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_wrap(. ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
scale_fill_discrete(name = "Scenarios",
# breaks = c("ctrl", "trt1", "trt2"),
labels = scenario_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Calculate means, CIs
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
scale_fill_discrete(name = "Scenarios",
breaks = c("sc1", "sc2", "sc3", "sc4"),
labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Calculate means, CIs
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
scale_fill_discrete(name = "Scenarios",
breaks = c("sc1", "sc2", "sc3", "sc4"),
labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Calculate means, CIs
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
scale_fill_discrete(name = "Scenario",
breaks = c("sc1", "sc2", "sc3", "sc4"),
labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
scale_color_discrete(name = "Scenario",
breaks = c("sc1", "sc2", "sc3", "sc4"),
labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Graph data
make.canonical.bargraph(responsetime.means, title, xlab, ylab)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
scale_color_discrete(name = "Scenario",
# breaks = c("sc1", "sc2", "sc3", "sc4"),
# labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
labels = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
scale_color_discrete(name = "Scenario",
# breaks = c("sc1", "sc2", "sc3", "sc4"),
# labels = c("scenario 1", "scenario 2", "scenario 3", "scenario 4")) +
labels = scenario_labels) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
scale_color_discrete(name = "Scenario",
labels = scenario_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# MEAN RESPONSETIME BY SCENARIO
title = "Response time across scenarios by complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean response time (ms, error bars = 95% CI)"
# Calculate means, CIs
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
rm(list=ls())
# Script for reading in phystables_env data and processing/analyzing
library(tidyverse)
setwd("/Users/erikbrockbank/web/vullab/data_processing/phystables_env/")
data = read_csv("phystables_env_raw.csv")
glimpse(data)
# Add column for whether selection was correct
data = data %>%
mutate(correct = trialtarget == usertarget)
# Add columns for scenario, complexity level, containment level, and rotation (incl. "distractor")
scenario.split = with(data, strsplit(trialname, "_"))
data$scenario = unlist(lapply(scenario.split, "[", 2))
data$containment = unlist(lapply(scenario.split, "[", 4))
data$complexity = unlist(lapply(scenario.split, "[", 6))
data$rotation = unlist(lapply(scenario.split, "[", 7))
# Add columns for (log) response time, scaled by mean response time for that participant, scenario
data = data %>%
filter(rotation != "distractor") %>% # NB: this gets rid of distractor trials altogether
group_by(scenario, subjID) %>%
mutate(log.responsetime = log10(responsetime),
mean.scenario.subj.responsetime = mean(responsetime), # mean responsetime for that subject, scenario
log.mean.scenario.subj.responsetime = log10(mean.scenario.subj.responsetime), # log of mean response time for that subject, scenario
scaled.responsetime = responsetime - mean.scenario.subj.responsetime, # unique response time - the subject, scenario mean
log.scaled.responsetime = log.responsetime - log.mean.scenario.subj.responsetime) # log of unique response time - the subject, scenario mean
glimpse(data)
containment_labels = c(
l1 = "low containment",
l2 = "medium containment",
l3 = "high containment"
)
complexity_labels = c(
l1 = "none",
l2 = "low",
l3 = "medium",
l4 = "high"
)
make.canonical.bargraph = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_wrap(. ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# MEAN RESPONSETIME
title = "Response time across complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean response time (ms, error bars = 95% CI)"
# Calculate means, CIs
responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(responsetime.means, title, xlab, ylab)
# MEAN LOG RESPONSETIME
title = "Log response time across complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean log response time (log10 ms, error bars = 95% CI)"
# Calculate means, CIs
log.responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(log.responsetime),
trials = n(),
ci.lower = t.test(log.responsetime)$conf.int[1],
ci.upper = t.test(log.responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(log.responsetime.means, title, xlab, ylab)
# MEAN SCALED RESPONSETIME
title = "Response time scaled by scenario mean across complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean scaled response time (ms, error bars = 95% CI)"
# Calculate means, CIs
scaled.responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(scaled.responsetime),
trials = n(),
ci.lower = t.test(scaled.responsetime)$conf.int[1],
ci.upper = t.test(scaled.responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(scaled.responsetime.means, title, xlab, ylab)
# MEAN SCALED LOG RESPONSETIME
title = "Log response time scaled by scenario mean across complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean scaled log response time (log10 ms, error bars = 95% CI)"
# Calculate means, CIs
log.scaled.responsetime.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(containment, complexity) %>%
summarize(mean.responsetime = mean(log.scaled.responsetime),
trials = n(),
ci.lower = t.test(log.scaled.responsetime)$conf.int[1],
ci.upper = t.test(log.scaled.responsetime)$conf.int[2]) %>%
select(containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph(log.scaled.responsetime.means, title, xlab, ylab)
scenario_labels = c(
sc1 = "scenario 1",
sc2 = "scenario 2",
sc3 = "scenario 3",
sc4 = "scenario 4"
)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
scale_color_discrete(name = "Scenario",
labels = scenario_labels) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# MEAN RESPONSETIME BY SCENARIO
title = "Response time across scenarios by complexity, containment levels"
xlab = "Complexity level"
ylab = "Mean response time (ms, error bars = 95% CI)"
# Calculate means, CIs
responsetime.scenario.means = data %>%
filter(rotation != "distractor") %>% # not necessary if previously removed above
group_by(scenario, containment, complexity) %>%
summarize(mean.responsetime = mean(responsetime),
trials = n(),
ci.lower = t.test(responsetime)$conf.int[1],
ci.upper = t.test(responsetime)$conf.int[2]) %>%
select(scenario, containment, complexity, mean.responsetime, trials, ci.lower, ci.upper)
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
#scale_color_discrete(name = "Scenario",
#                     labels = scenario_labels) +
guides(fill = FALSE) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
make.canonical.bargraph.scenario = function(responsetime.means, title, xlab, ylab) {
responsetime.means %>%
ggplot(aes(x = complexity, y = mean.responsetime, color = scenario)) +
geom_bar(stat = "identity", width = 0.5) +
scale_x_discrete(labels = complexity_labels) +
#scale_color_discrete(name = "Scenario",
#                     labels = scenario_labels) +
guides(color = FALSE) +
geom_errorbar(mapping = aes(ymin = ci.lower, ymax = ci.upper), width = 0.2) +
facet_grid(scenario ~ containment,
scales = "free_x",
labeller = labeller(containment = containment_labels,
scenario = scenario_labels)) +
labs(x = xlab, y = ylab) +
ggtitle(title)
}
# Graph data
make.canonical.bargraph.scenario(responsetime.scenario.means, title, xlab, ylab)
